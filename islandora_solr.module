<?php

/**
 * @file
 * Implementation of Solr search for the Islandora fedora_search module.
 */

DEFINE('SOLR_SEARCH_PATH', 'islandora/search');

// Includes functions for common db queries.
require_once dirname(__FILE__) . '/includes/db.inc';
// Includes functions for common tasks.
require_once dirname(__FILE__) . '/includes/common.inc';
// Includes functions to create Islandora Solr blocks.
require_once dirname(__FILE__) . '/includes/blocks.inc';
// Includes functions for advanced facet functionality.
require_once dirname(__FILE__) . '/includes/facets.inc';
// Includes functions for connecting to Solr and Luke.
require_once dirname(__FILE__) . '/includes/luke.inc';


/**
 * Implements hook_boot().
 * @global type $conf
 */
function islandora_solr_boot() {
  global $conf;

  // Allow i18n, by using multilingual variables.
  if (module_exists('i18n')) {
    $vars = array(
      'islandora_solr_facets',
      'islandora_solr_result_fields',
      'islandora_solr_searchterms'
    );

    if (isset($conf['i18n_variables']) && is_array($conf['i18n_variables'])) {
      $conf['i18n_variables'] = array_merge($vars, $conf['i18n_variables']);
    }
    else {
      $conf['i18n_variables'] = $vars;
    }
  }
}

/**
 * Implements hook_menu().
 */
function islandora_solr_menu() {
  $items['islandora/search'] = array(
    'title' => 'Search results',
    'page callback' => 'islandora_solr',
    'access arguments' => array('search islandora solr'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/islandora/search/islandora_solr'] = array(
    'title' => 'Solr index',
    'description' => 'Configure Solr index.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_admin_index_settings'),
    'access arguments' => array('administer islandora solr'),
    'file' => 'includes/admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/islandora/search/islandora_solr/index'] = array(
    'title' => 'Solr index',
    'description' => 'Configure Solr index.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_admin_index_settings'),
    'access arguments' => array('administer islandora solr'),
    'file' => 'includes/admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/islandora/search/islandora_solr/settings'] = array(
    'title' => 'Solr settings',
    'description' => 'Configure Solr search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_admin_settings'),
    'access arguments' => array('administer islandora solr'),
    'file' => 'includes/admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['islandora_solr/field'] = array(
    'title' => 'Result field',
    'description' => 'Configuration for Solr result field',
    'page callback' => 'islandora_solr_admin_settings_field',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer islandora solr'),
    'file' => 'includes/admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['islandora_solr/autocomplete_luke'] = array(
    'title' => 'Islandora Solr Luke autocomplete',
    'description' => 'Autocomplete callback to populate solr text fields.',
    'page callback' => '_islandora_solr_autocomplete_luke',
    'access arguments' => array('administer islandora solr'),
    'file' => 'includes/admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function islandora_solr_admin_paths() {
  $paths = array(
    'admin/config/islandora_solr' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_permission().
 */
function islandora_solr_permission() {
  return array(
    'search islandora solr' => array(
      'title' => t('Search the Solr index'),
      'description' => t('Search for objects in the repository using Solr. This permission exposes the search blocks and allows you to see search results.'),
    ),
    'administer islandora solr' => array(
      'title' => t('Administer Solr'),
      'description' => t('Administer settings for the Solr client.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_solr_theme() {
  // set path
  $path = drupal_get_path('module', 'islandora_solr');
  $file = 'theme.inc';

  return array(
    // advanced solr search form/block
    'islandora_solr_advanced_search_form' => array(
      'variables' => array(
        'form' => NULL,
      ),
    ),
    // theme admin form
    'islandora_solr_admin_primary_display' => array(
      'path' => $path,
      'file' => 'includes/admin.inc',
      'render element' => 'form',
    ),
    // theme admin form fields
    'islandora_solr_admin_fields' => array(
      'path' => $path,
      'file' => 'includes/admin.inc',
      'render element' => 'form',
    ),
    // results page
    'islandora_solr_wrapper' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-wrapper',
      'variables' => array('results' => NULL, 'secondary_profiles' => NULL,  'elements' => array()),
    ),
    // default results display
    'islandora_solr' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr',
      'variables' => array('results' => NULL, 'elements' => array(), 'pids' => array()),
    ),
     // default facet
    'islandora_solr_facet' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-facet',
      'variables' => array('buckets' => NULL, 'hidden' => FALSE, 'pid' => NULL),
    ),
     // facet wrapper
    'islandora_solr_facet_wrapper' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'variables' => array('title' => NULL, 'content' => NULL, 'pid' => NULL),
    ),
     // range slider
    'islandora_solr_range_slider' => array(
      'path' => $path . '/theme',
      'file' => $file,
      'template' => 'islandora-solr-range-slider',
      'variables' => array('form_key' => NULL, 'gap' => NULL, 'range_from' => NULL, 'range_to' => NULL),
    ),
  );
}

/**
 * Implements hook_islandora_solr_primary_display().
 */
function islandora_solr_islandora_solr_primary_display() {
  return array(
    // Note: this class should either be, or extend, the class IslandoraSolrResults.
    'default' => array(
      'name' => t('List (default)'),
      'module' => 'islandora_solr',
      'file' => 'includes/results.inc',
      'class' => "IslandoraSolrResults",
      'function' => "displayResults",
      'description' => t("A simple output."),
    ),
  );
}

/**
 * Page callback: Islandora Solr.
 *
 * Gathers url parameters, and calls the query builder, which prepares the query
 * based on the admin settings and url values.
 * Finds the right display and calls the IslandoraSolrRestuls class to build the
 * display, which it returns to the page.
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 *   the IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 * @param $query
 *   The query string
 * @return
 *   A rendered Solr display
 *
 * @see hook_menu()
 */
function islandora_solr($query = NULL) {
  global $_islandora_solr_queryclass;
  drupal_add_css(drupal_get_path('module', 'islandora_solr') . '/css/islandora_solr.theme.css');

  // Url parameters.
  $params = $_GET;
  if (! isset($params['type'])) {
    $params['type']='dismax';
  }

  // get profiles
  $primary_profiles = module_invoke_all('islandora_solr_primary_display');
  $secondary_profiles = module_invoke_all('islandora_solr_secondary_display');

  // Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $enabled_profiles = array();
  // get enabled displays
  $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
  // if it's set, we take these values
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }

  // Set primary display
  // check if display param is an valid, enabled profile. Else show default.
  if (isset($params['display']) && in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
    // unset invalid parameter
    unset($params['display']);
  }


  // Build and execute Apache Solr query.
  // this populates the GLOBAL!!!!!!!
  $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
  $_islandora_solr_queryclass->buildAndExecuteQuery($query, $params);

  if (empty($_islandora_solr_queryclass->islandoraSolrResult)) {
    return t('Error searching Solr index.');
  }

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($_GET['solr_profile']) && isset($secondary_profiles[$_GET['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(check_plain(t('There is an error in the Solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }
  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Get display class and function from current display
  $solr_class = $profile['class'];
  $solr_function = $profile['function'];


  // check if the display's class exists
  $use_default_display = TRUE;
  if (class_exists($solr_class)) {
    $implementation = new $solr_class();
    // check if the display's method exists
    if (method_exists($implementation, $solr_function)) {
      // implement results
      $output = $implementation->$solr_function($_islandora_solr_queryclass);
      $use_default_display = FALSE;
    }
  }

  // Class and method are not found: use default
  if ($use_default_display) {
    $results_class = new IslandoraSolrResults();
    $output = $results_class->displayResults($_islandora_solr_queryclass);
  }

  // debug dump
  if (variable_get('islandora_solr_debug_mode', 0)) {
    $message = t('Parameters: <br /><pre>!debug</pre>', array('!debug' => print_r($_islandora_solr_queryclass->solrParams, TRUE)));
    drupal_set_message(filter_xss($message, array('pre', 'br')), 'status');
  }

  return $output;
}

/**
 * Check if the current context is the search results page.
 *
 * @TODO: checking for display might not be the best way to do this. Need to
 * review the way blocks are created.
 *
 * @param object $islandora_solr_query
 *   The IslandoraSolrQueryProcessor object which includes the current query
 *   settings but at the beginning of IslandoraSolrQueryProcessor::executeQuery().
 * @return boolean
 *   Returns TRUE if the context is the search results page. FALSE if not.
 */
function islandora_solr_results_page($islandora_solr_query) {

  if (isset($islandora_solr_query->display)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
